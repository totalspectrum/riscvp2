{{
   JIT engine for P2
   Copyright 2019-2024 Total Spectrum Software Inc.
   MIT Licensed, see JIT.md for details.

   The main entry point is jit_set_pc, which is given
   ptrb pointing at the HUB address of the VM code to
   execute. This does a LUT lookup to find the cached
   P2 code, then jumps to it.

   If there is a cache miss we call compile_bytecode
   repeatedly with ptrb pointing at the next instruction to
   compile. When a branch is compiled, or we run out of cache
   space, we close out the cache line then jump to it.
}}

{ each cache tag contains an 20 bit address (long address of the Risc-V PC) and
  a 12 bit offset into LUT memory; that offset is multiplied by 16 and added to
  the cache base to give a cache base address
  this is arranged as the 12 bit offset, followed by the 20 bit address, so that
  we can extract the address with "and" of the lut mask
}
#ifdef USE_LUT_CACHE
'' $60 is good for fftbench
'' $40 is what we used before
''
#define CACHE_TAG_SIZE $40
'#define CACHE_OFFSET_ALIGN 1
#define CACHE_OFFSET_SHIFT 0
#else
'' this assumes we use the whole LUT for cache tags
#define CACHE_TAG_SIZE $200
#define CACHE_OFFSET_ALIGN 16
#define CACHE_OFFSET_SHIFT 4
#endif
#define CACHE_IGNORE_BITS 1

#ifdef LVL2_CACHE_TAGS
lvl2_tag_ptr	long	@LVL2_CACHE_TAGS
#endif

{ Initialize the cache
  Must be called from VM startup, and is called again whenever the
  cache overflows.
  Trashes: pb, jit_temp, LUT  
}

jit_init
	'' fall through to jit_init_cache
jit_reinit_cache
	neg	jit_temp, #1
	mov	pb, #0
	rep	@.endloop, ##CACHE_TAG_SIZE
	wrlut	jit_temp, pb
	add	pb, #1
.endloop
#ifdef LVL2_CACHE_TAGS
       setq2	#(CACHE_TAG_SIZE-1)
       wrlong	0, lvl2_tag_ptr
#endif
 _ret_	mov	jit_cachepc, jit_base_of_cache_mem
	
{
   Set the PC to ptrb. This should be called from the VM at startup,
   and is called again at runtime for every branch.
   There are actually two entry points:
   
   jit_set_pc is the normal one that does cache lookups
   jit_trampoline is similar, but if it sees a cache hit then it
   fixes up our caller to avoid future cache lookups (does a
   direct cache to cache jump). This is for internal use, and relies
   on calld to set the pb register to the caller's address.

   Trashes:
     This is not intended to be used as a subroutine
   
}
jit_set_pc
		mov	pb, #0		' source for dest is unknown
	
jit_trampoline_set_pc
#ifndef FLASH_HIMEM
		and	ptrb, jit_loc_mask	' sanitize address
#endif		
#ifdef USE_DISASM
		call	#hub_print_newpc
#endif
		'' check for a cache hit by looking in the LUT
		'' NOTE: this code assumes that all but the CACHE_IGNORE_BITS
		'' bits of the PC in ptrb are
		'' significant. If you know that ptrb is aligned differently,
		'' you should shift and mask
		mov    jit_instr, ptrb
#ifdef CACHE_IGNORE_BITS		
		shr    jit_instr, #CACHE_IGNORE_BITS			' divide by cache tag size
#endif		
		and    jit_instr, #CACHE_TAG_SIZE-1
		rdlut	jit_temp, jit_instr		' fetch cache data
		mov	jit_orig_cachepc, jit_temp	' save a copy
#ifndef FLASH_HIMEM		
		and	jit_temp, jit_loc_mask
#endif		
		cmp	jit_temp, ptrb wz		' does it match our PC?
    if_nz	jmp	#cache_miss 		' if not in cache, recompile

do_cache_hit
    		'' code for a cache hit
		'' if a cache hit, just load the cached address
		'' into orig_cachepc
		andn	jit_orig_cachepc, jit_loc_mask
		shr	jit_orig_cachepc, #(20-CACHE_OFFSET_SHIFT)
		add	jit_orig_cachepc, jit_base_of_cache_mem

		'' if pb is <> 0, then it's a return address from
		'' the instruction that came here; fix that instruction
		'' up
		'' BEWARE: pb can come in with some high bits set
		'' so don't rely on those bits
		tjz	pb, jit_orig_cachepc+0		' if pb == 0, just go to the cache
		and	pb, jit_loc_mask wz
		
		'' OK, pb points at the instruction to fix up now
		'' be careful to copy over the condition bits too
#ifdef USE_LUT_CACHE
		sub	pb, #1
		rdlut	jit_condition, pb      ' fetch original
#ifdef FLASH_HIMEM
		sub	pb, #2
#else
		sub	pb, #1	       	       ' step back to the loc instruction
#endif
#else
		sub	pb, #4
		rdlong	jit_condition, pb      ' fetch original
#ifdef FLASH_HIMEM
		sub	pb, #8
#else
		sub	pb, #4	       	       ' step back to loc instruction
#endif
#endif
#ifdef DEBUG_ENGINE_ALL
		mov	uart_char, #"^"
		call	#ser_tx
		mov	uart_num, jit_condition
		call	#ser_hex
#endif
		and	jit_condition, jit_cond_mask
		
		mov	jit_instr, jit_plain_jmp_pat
		andn	jit_instr, jit_loc_mask
		andn	jit_instr, jit_cond_mask
		or     	jit_instr, jit_condition
		or     	jit_instr, jit_orig_cachepc
#ifdef USE_LUT_CACHE
		wrlut	jit_instr, pb
#else
		wrlong 	jit_instr, pb
#endif		
#ifdef DEBUG_ENGINE_ALL
		mov	uart_char, #"^"
		call	#ser_tx
		mov	uart_num, pb
		call	#ser_hex
		call	#ser_nl
#ifdef USE_DISASM
		mov	dis_instr, jit_instr
		call	#disassemble
#endif
#endif
goto_cache
		jmp	jit_orig_cachepc+0	' indirect jump to the cached code

		' OK, we got a cache miss here
		' so we have to compile a new trace
cache_miss
		' check for cache thrashing, where code is in cache but its
		' tag is not
#ifdef LVL2_CACHE_TAGS
		mov	temp2, jit_instr
		shl	temp2, #2
		add	temp2, lvl2_tag_ptr
		rdlong	jit_temp, temp2
		mov	temp, jit_temp
		and	temp, jit_loc_mask
		
		cmp	temp, ptrb wz
	if_nz	jmp	#real_cache_miss
	
		' swap the tags in RAM and LUT
		wrlong	jit_orig_cachepc, temp2
		mov	jit_orig_cachepc, jit_temp
		wrlut	jit_orig_cachepc, jit_instr
		jmp	#do_cache_hit
real_cache_miss
#endif

#ifdef DEBUG_ENGINE
		call	#hub_print_cachemiss
#endif

		' if the cache is full, flush it
		mov	jit_temp2, jit_top_of_cache_mem
		sub	jit_temp2, jit_cachepc wcz

    if_be	call	#jit_reinit_cache

#ifdef CACHE_OFFSET_ALIGN
    		' align jit_cachepc on a valid boundary
    		add	jit_cachepc, #CACHE_OFFSET_ALIGN-1
		andn	jit_cachepc, #CACHE_OFFSET_ALIGN-1
#endif		
		mov	jit_orig_cachepc, jit_cachepc	' save the starting cachepc
		' update cache tag
#ifdef LVL2_CACHE_TAGS
		' save the old LUT tag in HUB
		mov	temp2, jit_instr
		shl	temp2, #2
		add	temp2, lvl2_tag_ptr
		rdlut	temp, jit_instr
		wrlong	temp, temp2
#endif		
		mov	jit_temp, jit_orig_cachepc
		sub	jit_temp, jit_base_of_cache_mem
		shl	jit_temp, #(20-CACHE_OFFSET_SHIFT)
		or	jit_temp, ptrb
    		wrlut	jit_temp, jit_instr		' update cached pc

compile_line
		call	#compile_bytecode_start_line
compile_loop
#ifdef USE_DISASM
		call	#ser_nl
		mov	uart_num, ptrb
		call	#ser_hex
#endif		
		call	#compile_bytecode
' done_instruction

		' is there room for another instruction?
		' if not, close out the cache line
		mov	temp, jit_top_of_cache_mem
		subs	temp, jit_cachepc wcz
	if_a	jmp	#compile_loop
#ifdef DEBUG_ENGINE_ALL
		mov	uart_char, #"U"		' cache full...
		call	#ser_tx
#endif
close_trace
		jmp	#jit_emit_jump_to_ptrb

#ifdef FLASH_HIMEM
jit_augs_instr
		augs	#0
jit_mvi_jump_pat
		mov	ptrb, ##0-0
		calld	pb, #\jit_trampoline_set_pc
#else
jit_direct_jump_pat
		loc	ptrb, #\0-0
		calld	pb, #\jit_trampoline_set_pc
#endif		
jit_indirect_jump_pat
		jmp	#\jit_set_pc
		
''''''''''''''''''''''
'' emit a direct branch to the
'' value in jit_branch_dest
'' closes out the cache line and
'' does not return
'' the branch may be conditional
'' based on the "condition" variable
''''''''''''''''''''''
jit_branch_dest	long	0
jit_branch_alt	long	0

jit_emit_direct_branch
		mov	jit_branch_alt, ptrb

jit_do_emit
		shl	jit_condition, #28 wz	' put condition in top part
		' skip branch if condition is 0
	if_z	jmp	#jit_emit_jump_to_alt

#ifdef FLASH_HIMEM
jit_direct_emit
		mov	jit_mvi_jump_pat, jit_branch_dest
		shr	jit_mvi_jump_pat, #9
		or	jit_mvi_jump_pat, jit_augs_instr
		and	jit_branch_dest, #$1ff
		andn	jit_mvi_jump_pat+1, #$1ff
		or	jit_mvi_jump_pat+1, jit_branch_dest
		andn	jit_mvi_jump_pat+2, jit_cond_mask
		or	jit_mvi_jump_pat+2, jit_condition
		mov	jit_instrptr, #jit_mvi_jump_pat
    		callpb 	#3, #jit_emit

		' check for unconditional branch;
		' if it is unconditional, go do it
		cmp	jit_condition, jit_cond_mask wz
    if_z	jmp	jit_orig_cachepc+0

jit_emit_jump_to_alt
    		'' now emit another branch to jit_branch_alt
		mov	jit_mvi_jump_pat, jit_branch_alt
		shr	jit_mvi_jump_pat, #9
		or	jit_mvi_jump_pat, jit_augs_instr
		andn	jit_mvi_jump_pat+1, #$1ff
		and	jit_branch_alt, #$1ff
		or	jit_mvi_jump_pat+1, jit_branch_alt
		
		or	jit_mvi_jump_pat+2, jit_cond_mask ' make unconditional
		mov	jit_instrptr, #jit_mvi_jump_pat
    		callpb 	#3, #jit_emit
		jmp	jit_orig_cachepc+0

#else
jit_direct_emit
		and	jit_branch_dest, jit_loc_mask
		andn	jit_direct_jump_pat, jit_loc_mask
		or     	jit_direct_jump_pat, jit_branch_dest
		andn	jit_direct_jump_pat+1, jit_cond_mask
		or	jit_direct_jump_pat+1, jit_condition
		mov	jit_instrptr, #jit_direct_jump_pat
    		callpb 	#2, #jit_emit

		' check for unconditional branch;
		' if it is unconditional, go do it
		cmp	jit_condition, jit_cond_mask wz
    if_z	jmp	jit_orig_cachepc+0

jit_emit_jump_to_alt
    		'' now emit another branch to jit_branch_alt
		andn	jit_direct_jump_pat, jit_loc_mask
		or     	jit_direct_jump_pat, jit_branch_alt
		or	jit_direct_jump_pat+1, jit_cond_mask ' make unconditional
		mov	jit_instrptr, #jit_direct_jump_pat
    		callpb 	#2, #jit_emit
		jmp	jit_orig_cachepc+0
#endif

jit_finish_line
#ifdef DEBUG_ENGINE_ALL
		mov	uart_char, #"|"
		call	#ser_tx
#endif
jit_emit_jump_to_ptrb
		mov	jit_branch_dest, ptrb
		mov	jit_condition, jit_cond_mask	' unconditional branch
		jmp	#jit_direct_emit

jit_cond_mask	long	$f0000000

''''''''''''''''''''''
'' emit an indirect branch to the
'' value already compiled into ptrb
'' closes out the cache line and
'' does not return
'' the branch may be conditional
'' based on the "condition" variable
''''''''''''''''''''''
jit_emit_indirect_branch
		shl	jit_condition, #28 wz	' normalize condition
		andn	jit_indirect_jump_pat, jit_cond_mask
		or	jit_indirect_jump_pat, jit_condition
		mov	jit_instrptr, #jit_indirect_jump_pat
    if_nz	callpb 	#1, #jit_emit		' skip the jump if condition is 0
		jmp	#jit_finish_line

''
'' emit instructions starting at
'' jit_instrptr
''
#ifdef DEBUG_ENGINE
tmp_ptr long 0
pb_copy	long 0
#endif

jit_emit
#ifdef DEBUG_ENGINE

#ifdef USE_DISASM
		'' disassemble the words we are creating
		call	#disassemble_multi
		
#endif
#endif
#ifdef USE_LUT_CACHE
jit_emit_loop
		setd	do_lut_wr, jit_instrptr
		sub	pb, #1 wz
		add	jit_instrptr, #1
do_lut_wr
		wrlut	0-0, jit_cachepc
		add	jit_cachepc, #1
	if_nz	jmp	#jit_emit_loop
		ret
#else
		setd	do_emit_instr, jit_instrptr
		sub	pb, #1 wz
	if_nz	setq	pb
do_emit_instr
		wrlong	0-0, jit_cachepc
		add	pb, #1
		shl	pb, #2
	_ret_	add	jit_cachepc, pb
#endif

jit_plain_jmp_pat
		jmp	#\$abcd
		
jit_loc_mask	long	$000fffff	' 20 bits
#ifdef USE_LUT_CACHE
jit_base_of_cache_mem
		long	$200 + CACHE_TAG_SIZE
jit_top_of_cache_mem
		long	$400 - MAX_LONGS_PER_INSTRUCTION
#else

jit_base_of_cache_mem
		' NOTE: cache lines want to be 16 byte aligned
		long	(@@@START_OF_CACHE + 15) & !15
jit_top_of_cache_mem
		long	@@@END_OF_CACHE - MAX_LONGS_PER_INSTRUCTION

#endif
