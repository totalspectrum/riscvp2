''
'' loader for high memory
'' flash version
''
''
'' The actual low level flash writing code is based on SpiFlash.spin2, by
'' Nicolas Benezan and Evan Hillas
''
#define cmd dis_temp2
#define adr dis_temp1
#define data dest

con
	spi_cs = 61
	spi_ck = 60
	spi_di = 59 ' P2 -> flash
	spi_do = 58 ' flash -> P2

        modeCLK = P_TRANSITION | P_OE | P_INVERT_OUTPUT     ' SPI_CK
        modeTXD = P_SYNC_TX | P_INVERT_B | P_OE | ((spi_ck - spi_di) & %111)<<24 ' + P_SYNC_IO + P_FILT0_AB
        modeRXD = P_SYNC_RX |((spi_ck - spi_do) & %111)<<24

        Page_Size    = 256

        Write_Disable = $04
        Write_Enable = $06
        Erase_4k     = $20
        Erase_64k    = $D8
        Write_Page   = $02
        Read_Data    = $03
        Read_Status  = $05
        Reset_Enable = $66
        Reset_Device = $99
        Program_Resume = $7a
        PD_Release   = $ab

dat
	orgh
	' initialize the flash read code
flash_init
	call	#Spi_Init
	mov	cmd, #PD_Release
	call	#Spi_Cmd8
	drvh	#spi_cs
	waitx	##252_000	' roughly 1 ms
	mov	cmd, #Reset_Enable
	call	#Spi_Cmd8
	mov	cmd, #Reset_Device
	call	#Spi_Cmd8
	jmp	#Spi_Wait

	' translate the address in "opcode" into a hub address
translate_flash_address
	loc	pa, #flash_tags
	loc	ptra, #flash_cache
	' see if it's already in the cache
	mov	temp, ##$00_FF_FF00
	and	temp, opcode
	rdlong	temp2, pa
	cmp	temp, temp2 wz
 if_nz	jmp	#flash_cache_miss
flash_cache_hit
	and	opcode, #$ff
 _ret_	add	opcode, ptra	' add flash cache offset

flash_cache_miss
	wrlong	temp, pa	' update flash tag
#ifdef DEBUG_ENGINE
	mov	uart_char, #"*"
	call	#ser_tx
	mov	uart_num, temp
	call	#ser_hex
	call	#ser_nl
#endif	
	' read a page of data from temp (in flash) to ptra (in HUB)
	call	#Spi_Init
	mov	cmd, #Read_Data
	mov	adr, temp
	call	#Spi_Cmd32		' start read

	mov	temp2, #256  ' size of data to read
.loop
        wxpin   #7 | 1<<5, #spi_do             ' 8 bits, with hold time (post-clock sampling)
        wypin   #16,#spi_ck                    ' start 16 clock transitions
        dirh    #spi_do                        ' enable RX smart pin
.waitDone       testp   #spi_do   wz                   ' IN=1 if byte received
        if_nz   jmp     #.waitDone                     ' wait until byte received
        rdpin   data,#spi_do
        rev     data
        zerox   data,#7                        ' limit to 8 bits
        dirl    #spi_do
	wrbyte	data, ptra++
	djnz	temp2, #.loop

	' done reading
	drvh	#spi_cs
	sub	ptra, #256	' move ptra back to cache start
#ifdef DEBUG_ENGINE
	mov	uart_char, #"$"
	call	#ser_tx
	mov	uart_char, #"$"
	call	#ser_tx
	call	#ser_nl
	mov	temp2, #4
.prtlp
	mov	uart_num, ptra
	call	#ser_hex
	rdlong	uart_num, ptra++
	call	#ser_hex
	call	#ser_nl
	djnz	temp2, #.prtlp
	sub	ptra, #16
	call	#ser_nl
#endif	
	jmp	#flash_cache_hit

'' initialize SPI for flash
Spi_Init
                drvh    #spi_cs
                fltl    #spi_ck                        ' reset smart pins
                fltl    #spi_di
                fltl    #spi_do
                wrpin   ##modeClk,#spi_ck              ' smart pin transition mode
                wrpin   ##modeTXD,#spi_di              ' smart pin synchronous serial transmit
                wrpin   ##modeRXD,#spi_do              ' smart pin synchronous serial receive
                wxpin   #2,#spi_ck                     ' clock transition base period (sysclock/4)
                dirh    #spi_ck                        ' enable smart pin
		ret

'' outputs 8 bits command, MSB first
'' command is in "cmd" register
SPI_Cmd8
                outh    #spi_cs
                waitx   #6                             ' 12+6 = 18 ticks (50 ns minimum CS deselect for write commands)
                shl     cmd,#24                        ' shift command up
                rev     cmd
                wxpin   #7, #spi_di                    ' 8 bits, continuous mode
                wypin   cmd,#spi_di
                outl    #spi_cs
                wypin   #16,#spi_ck                    ' start CLK sequence (16 transitions = 8 pulses)
                dirh    #spi_di                        ' enable TX smart pin
.waitRdy        testp   #spi_ck wz                     ' IN=1 if clocking finished
        if_nz   jmp     #.waitRdy                      ' wait until last CLK sequence finished
                dirl    #spi_di
		ret

		' outputs 4 bytes: 8 bit command + 24 bits adr
Spi_Cmd32
                outh    #spi_cs
                waitx   #4                             ' 14+4 = 18 ticks (50 ns minimum CS deselect for write commands)
                shl     cmd,#24                        'shift command up
                or      cmd,adr                        'or in address
                rev     cmd
                wxpin   #31, #spi_di                   ' 32 bits, continuous mode
                wypin   cmd,#spi_di
                outl    #spi_cs
                wypin   #64,#spi_ck                    ' start CLK sequence (64 transitions = 32 pulses)
                dirh    #spi_di                        ' enable TX smart pin
.waitRdy        testp   #spi_ck wz                     ' IN=1 if clocking finished
        if_nz   jmp     #.waitRdy                      ' wait until last CLK sequence finished
                dirl    #spi_di
		ret

'' read 8 bits into data
Spi_RdByte
                wxpin   #7 | 1<<5, #spi_do             ' 8 bits, with hold time (post-clock sampling)
                wypin   #16,#spi_ck                    ' start 16 clock transitions
                dirh    #spi_do                        ' enable RX smart pin
.waitDone       testp   #spi_do   wz                   ' IN=1 if byte received
        if_nz   jmp     #.waitDone                     ' wait until byte received
                rdpin   data,#spi_do
                rev     data
                zerox   data,#7                        ' limit to 8 bits
                dirl    #spi_do
		ret

Spi_Wait
		mov	cmd, #Read_Status
		call	#Spi_Cmd8
		call	#Spi_RdByte
		test	data, #$1 wz
	if_nz	jmp	#Spi_Wait
		drvh	#spi_cs
		ret

