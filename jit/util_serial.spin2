	''
	'' serial port utility routines
	''
	'' these can go in HUB memory or LUT memory, and probably
	'' should do so: but beware, any XBYTE based interpreter
	'' must save/restore the rdfast ptr if it uses HUBEXEC
	''
	'' we must define:
	'' _DEFAULT_CLOCK_MODE = P2 clock setting mode (only if $18 == 0)
	'' _DEFAULT_CYCLES_PER_SEC = P2 frequency
	'' _DEFAULT_BAUD = baud rate to use (only if $1c == 0)
CON

_DEFAULT_CLOCK_MODE=$010007f8
_DEFAULT_CYCLES_PER_SEC=160_000_000

_DEFAULT_BAUD=230_400
  RX_PIN = 63
  TX_PIN = 62

  '' smart pin modes
  _txmode       = %0000_0000_000_0000000000000_01_11110_0 'async tx mode, output enabled for smart output
  _rxmode       = %0000_0000_000_0000000000000_00_11111_0 'async rx mode, input  enabled for smart input

DAT

		' set clock to specified speed
		' pa == clock mode
		' pb == clock frequency
ser_clkset
		hubset	#0
		nop
		hubset	pa
		wrlong	pa, #$18
		wrlong	pb, #$14
		waitx	##20_000_000/100	' let things settle a bit
		or	pa, #3
		hubset	pa

		' now update bit periods for baud
		rdlong	pa, #$1c 	 ' read current baud setting

		' calculate (clock_freq<<16) / baud
		' clock_freq can range up to 400_000_000
		' baud can range down to 2400
		' pa has baud rate
		' pb has clock_freq
		mov	temp, pb
		shr	temp, #16
		shl	pb, #16
		setq	temp
		qdiv	pb, pa
		getqx	temp	' temp is (clock_freq<<16) / baud
		and	temp, ##$fffffc00
		or	temp, #7	' set 8 bit for send/receive

		' set new baud parameters based on new clock frequency
		dirl	#TX_PIN
		dirl	#RX_PIN
		wrpin	##_txmode, #TX_PIN
		wxpin	temp, #TX_PIN
		wrpin	##_rxmode, #RX_PIN
		wxpin	temp, #RX_PIN
		dirh	#TX_PIN
		dirh	#RX_PIN
		ret
		
		' initialize the serial system using RX_PIN, TX_PIN, and BAUD
ser_init
		rdlong	pb, #$1c wz	' check existing baud setting
	if_z	wrlong	##_DEFAULT_BAUD, #$1c	' set baud if none given
		rdlong	pb, #$14	' get frequency
		rdlong	pa, #$18 wz	' get clock mode; if 0, use defaults
		
	if_z	mov	pa, ##_DEFAULT_CLOCK_MODE
	if_z	mov	pb, ##_DEFAULT_CYCLES_PER_SEC
		call	#ser_clkset

		rdpin	pb, #RX_PIN	wc ' clear initial rx
		setint3	#0
		
		loc	pb, #@uart_isr
		mov	IJMP3, pb
		setse4	#%110_000000 + RX_PIN ' interrupt on high
		'setse4	#%001_000000 + RX_PIN ' interrupt on rise
		setint3	#7		' set interrupt 3 to SE4
		ret
		
		'' receive a single character into uartchar
		'' or set it to -1 if no character available
ser_rx
		neg	uart_char, #1
		cmp	uart_head, uart_tail wz
	if_z	ret

		'' retrieve a character from uart_tail
		rdbyte	uart_char, uart_tail
		add	uart_tail, #1
		cmp	uart_tail, uart_end wz
	if_z	mov	uart_tail, uart_start
		ret

uart_isr
		mov	isr_temp, uart_head
		add	isr_temp, #1
		cmp	isr_temp, uart_end wz
	if_z	mov	isr_temp, uart_start

		rdpin	uart_isr_char, #RX_PIN
		shr	uart_isr_char, #24
		cmp	isr_temp, uart_tail wz
	if_nz	wrbyte	uart_isr_char, uart_head
	if_nz	mov	uart_head, isr_temp
		reti3

		' print a single character (in uart_char)
ser_tx
		wypin	uart_char, #TX_PIN
		waitx	#20
.txflush
		testp	#TX_PIN wc
	  if_nc	jmp	#.txflush
		ret

		' print a string, pointed to by pb
ser_str
		rdbyte	uart_char, uart_str wz
		add	uart_str, #1
  if_z		ret
  		call	#ser_tx
		jmp	#ser_str

		'' print a hex number
		'' number is in uart_num
		'' uses temp, uart_char, uart_num
ser_hex
		mov	uart_temp, #8
.hexlp
		getnib	uart_char, uart_num, #7
		add	uart_char, #"0"
		cmp	uart_char, #"9" wcz
	if_a	add	uart_char, #("A"-"0") - 10
		call	#ser_tx
		rol	uart_num, #4
		djnz	uart_temp, #.hexlp
		mov	uart_char, #" "
		jmp	#ser_tx

ser_nl		mov	uart_char, #13
		call	#ser_tx
		mov	uart_char, #10
		jmp	#ser_tx

uart_base_ptr
		byte	0[64]
uart_end_ptr
